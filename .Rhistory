source("simulations/simulation_cpath_versions.R")
source("simulations/simulation_cpath_versions.R")
?cor
source("simulations/simulation_cpath_versions.R")
write.table(RES, file="COR_sim5.txt")
source("simulations/simulation_cpath_versions.R")
write.table(RES, file="COR_sim.txt")
source("simulations/simulation_cpath_versions.R")
write.table(RES, file="COR_sim3.txt")
source("simulations/simulation_cpath_versions.R")
source("simulations/simulation_cpath_versions.R")
source("simulations/simulation_cpath_versions_CORR.R")
write.table(RES, file="COR_sim4.txt")
is.element(1,c(2,3)
)
is.element(1,c(2,3))
is.element(c(1,2),c(2,3))
is.element(c(3,2),c(2,3))
source("simulations/simulation_cpath_min_COV.R")
q()
library(treeshap)
install.packages("treeshap")
source("simulations/simulation_main_datasets_treeSHAP.R")
traceback()
source("simulations/simulation_main_datasets_treeSHAP.R")
traceback()
q()
source("simulations/simulation_main_datasets_treeSHAP.R")
# main 
library(ranger)
library(lime)
library(cpath)
library(shapr)
library(ranger)
library(lime)
library(cpath)
library(mlbench)
library(shapr)
library(treeshap)
model_unified
model
vimp
source("simulations/simulation_main_datasets_treeSHAP.R")
traceback()
source("simulations/simulation_main_datasets_treeSHAP.R")
is(model_unified)
is(model)
source("simulations/simulation_main_datasets_treeSHAP.R")
source("simulations/simulation_main_datasets_treeSHAP.R")
vimp = treeshap(model_unified, data)
data
vimp = treeshap(model_unified, data)
class(model_unified)
model_unified = unify(model, data)
 #model = ranger(x=data,y=as.factor(target), 
    model = ranger(target~., data=as.data.frame(data),
                num.trees=100, 
                classification=TRUE, 
                #probability=TRUE, 
                #mtry=4, 
                #replace=TRUE,#), 
                importance='impurity')
    pred = predict(model, data)$predictions
    #pred = apply(pred,1,function(x){which.max(x)-1})
    #pred = t(pred)
    #print("?")
model_unified = unify(model, data)
target
    #model = ranger(x=data,y=as.factor(target), 
    model = ranger(target~., data=as.data.frame(data2),
                num.trees=100, 
                classification=TRUE, 
                #probability=TRUE, 
                #mtry=4, 
                #replace=TRUE,#), 
                importance='impurity')
    pred = predict(model, data)$predictions
    #pred = apply(pred,1,function(x){which.max(x)-1})
    #pred = t(pred)
    #print("?")
    if(all(pred==0)|all(pred==1)){
        next
    #}
  #model = ranger(x=data,y=as.factor(target), 
    model = ranger(target~., data=as.data.frame(data2),
                num.trees=100, 
                classification=TRUE, 
                #probability=TRUE, 
                #mtry=4, 
                #replace=TRUE,#), 
                importance='impurity')
    pred = predict(model, data)$predictions
    #pred = apply(pred,1,function(x){which.max(x)-1})
    #pred = t(pred)
    #print("?")
model_unified = unify(model, data)
vimp = treeshap(model_unified, data)
vimp
source("simulations/simulation_main_datasets_treeSHAP.R")
model_unified = unify(model, data)
target
source("simulations/simulation_main_datasets_treeSHAP.R")
data
data2
is(model)
model_unified = unify(model, data)
model_unified = unify(model, data)
model_unified = unify(model, data2)
model_unified = unify(model, data)
source("simulations/simulation_main_datasets_treeSHAP.R")
P   = cpath::cpaths_mc(model, data, k=4, n_paths= 10000)
P   = cpath::cpaths_mc(model, data, k=4, n_paths= 10000)
P   = cpath::cpaths_mc(model, data, k=4, n_paths= 10000)
q()
